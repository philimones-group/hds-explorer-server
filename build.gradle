buildscript {
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"        
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.6"
        classpath "org.grails.plugins:hibernate5:7.3.0"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.4.7"
        
        classpath 'org.grails.plugins:database-migration:4.1.0'
        classpath "org.grails.plugins:views-gradle:2.3.2"
    }
}

version "1.1 build 402"
group "org.philimone.hds.explorer"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"org.grails.plugins.views-json"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.hibernate:hibernate-core:5.6.11.Final"
    implementation "org.hibernate:hibernate-ehcache"
    implementation "org.grails.plugins:gsp"
    implementation "org.grails.plugins:views-json"
    implementation "org.grails.plugins:views-json-templates"
    
    profile "org.grails.profiles:web"
    runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.4.7"
    testImplementation "io.micronaut:micronaut-inject-groovy"    
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails.plugins:geb"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-api:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-support:4.0.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:4.0.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:4.0.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-safari-driver:4.0.0"

    //plugins
    implementation 'org.grails.plugins:fields:3.0.0.RC1'

    implementation 'com.google.guava:guava:22.0'
    runtimeOnly 'mysql:mysql-connector-java:8.0.32'    
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.16'


    implementation 'org.grails.plugins:spring-security-core:4.0.4'

    implementation 'org.grails.plugins:mail:3.0.0'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation 'com.ibm.icu:icu4j:77.1' // or latest version

    implementation 'org.reflections:reflections:0.10.2'
    
    //new database manager
    implementation('org.grails.plugins:database-migration:4.2.0') {
        exclude module: 'spring-boot-cli'
    }     
    
    implementation 'org.liquibase:liquibase-core:4.19.0'

    //odk javarosa to read xforms instances
    implementation 'org.getodk:javarosa:4.2.0'

    //load local libraries
    implementation fileTree(dir: 'lib', include: '*.jar')
}

//to avoid run-command issues
runCommand {
    systemProperty "spring.devtools.restart.enabled", false
}

//read development env variables from global gradle.properties
def databaseUrl = project.hasProperty('DEV_HDS_EXPLORER_SERVER_DB_URL') ? project.getProperty('DEV_HDS_EXPLORER_SERVER_DB_URL') : ''
def databaseUser = project.hasProperty('DEV_HDS_EXPLORER_SERVER_DB_USER') ? project.getProperty('DEV_HDS_EXPLORER_SERVER_DB_USER') : ''
def databasePass = project.hasProperty('DEV_HDS_EXPLORER_SERVER_DB_PASS') ? project.getProperty('DEV_HDS_EXPLORER_SERVER_DB_PASS') : ''

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx2048m')
    sourceResources sourceSets.main    
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)

    //set development env variables
    systemProperty 'DEV_DATABASE_URL', databaseUrl
    systemProperty 'DEV_DATABASE_USER', databaseUser
    systemProperty 'DEV_DATABASE_PASS', databasePass
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

webdriverBinaries {
    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        chromedriver {
            version = '2.45.0'
            fallbackTo32Bit = true
        }
        geckodriver '0.30.0'
    }
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
        systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
    } else {
        systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
        systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
    }
}

assets {
    minifyJs = true
    minifyCss = true
}
